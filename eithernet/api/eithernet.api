public final class com/slack/eithernet/AnnotationsKt {
	public static final fun createStatusCode (I)Lcom/slack/eithernet/StatusCode;
	public static final fun errorType ([Ljava/lang/annotation/Annotation;)Lkotlin/Pair;
	public static final fun statusCode ([Ljava/lang/annotation/Annotation;)Lkotlin/Pair;
	public static final fun toKType (Lcom/slack/eithernet/ResultType;)Lkotlin/reflect/KType;
}

public final class com/slack/eithernet/Annotations_jvmKt {
	public static final fun createResultType (Ljava/lang/reflect/Type;)Lcom/slack/eithernet/ResultType;
	public static final fun toType (Lcom/slack/eithernet/ResultType;)Ljava/lang/reflect/Type;
}

public final class com/slack/eithernet/ApiException : java/lang/Exception {
	public fun <init> (Ljava/lang/Object;)V
	public final fun getError ()Ljava/lang/Object;
}

public abstract interface class com/slack/eithernet/ApiResult {
	public static final field Companion Lcom/slack/eithernet/ApiResult$Companion;
}

public final class com/slack/eithernet/ApiResult$Companion {
	public final fun apiFailure ()Lcom/slack/eithernet/ApiResult$Failure$ApiFailure;
	public final fun apiFailure (Ljava/lang/Object;)Lcom/slack/eithernet/ApiResult$Failure$ApiFailure;
	public static synthetic fun apiFailure$default (Lcom/slack/eithernet/ApiResult$Companion;Ljava/lang/Object;ILjava/lang/Object;)Lcom/slack/eithernet/ApiResult$Failure$ApiFailure;
	public final fun httpFailure (I)Lcom/slack/eithernet/ApiResult$Failure$HttpFailure;
	public final fun httpFailure (ILjava/lang/Object;)Lcom/slack/eithernet/ApiResult$Failure$HttpFailure;
	public static synthetic fun httpFailure$default (Lcom/slack/eithernet/ApiResult$Companion;ILjava/lang/Object;ILjava/lang/Object;)Lcom/slack/eithernet/ApiResult$Failure$HttpFailure;
	public final fun networkFailure (Ljava/io/IOException;)Lcom/slack/eithernet/ApiResult$Failure$NetworkFailure;
	public final fun success (Ljava/lang/Object;)Lcom/slack/eithernet/ApiResult$Success;
	public final fun unknownFailure (Ljava/lang/Throwable;)Lcom/slack/eithernet/ApiResult$Failure$UnknownFailure;
}

public abstract interface class com/slack/eithernet/ApiResult$Failure : com/slack/eithernet/ApiResult {
}

public final class com/slack/eithernet/ApiResult$Failure$ApiFailure : com/slack/eithernet/ApiResult$Failure {
	public fun <init> (Ljava/lang/Object;Ljava/util/Map;)V
	public final fun getError ()Ljava/lang/Object;
	public final fun withTags (Ljava/util/Map;)Lcom/slack/eithernet/ApiResult$Failure$ApiFailure;
}

public final class com/slack/eithernet/ApiResult$Failure$HttpFailure : com/slack/eithernet/ApiResult$Failure {
	public fun <init> (ILjava/lang/Object;Ljava/util/Map;)V
	public final fun getCode ()I
	public final fun getError ()Ljava/lang/Object;
	public final fun withTags (Ljava/util/Map;)Lcom/slack/eithernet/ApiResult$Failure$HttpFailure;
}

public final class com/slack/eithernet/ApiResult$Failure$NetworkFailure : com/slack/eithernet/ApiResult$Failure {
	public fun <init> (Ljava/io/IOException;Ljava/util/Map;)V
	public final fun getError ()Ljava/io/IOException;
	public final fun withTags (Ljava/util/Map;)Lcom/slack/eithernet/ApiResult$Failure$NetworkFailure;
}

public final class com/slack/eithernet/ApiResult$Failure$UnknownFailure : com/slack/eithernet/ApiResult$Failure {
	public fun <init> (Ljava/lang/Throwable;Ljava/util/Map;)V
	public final fun getError ()Ljava/lang/Throwable;
	public final fun withTags (Ljava/util/Map;)Lcom/slack/eithernet/ApiResult$Failure$UnknownFailure;
}

public final class com/slack/eithernet/ApiResult$Success : com/slack/eithernet/ApiResult {
	public fun <init> (Ljava/lang/Object;Ljava/util/Map;)V
	public final fun getTags ()Ljava/util/Map;
	public final fun getValue ()Ljava/lang/Object;
	public final fun withTags (Ljava/util/Map;)Lcom/slack/eithernet/ApiResult$Success;
}

public abstract interface annotation class com/slack/eithernet/DecodeErrorBody : java/lang/annotation/Annotation {
}

public abstract interface annotation class com/slack/eithernet/ExperimentalEitherNetApi : java/lang/annotation/Annotation {
}

public final class com/slack/eithernet/ExtensionsKt {
	public static final fun exceptionOrNull (Lcom/slack/eithernet/ApiResult$Failure;)Ljava/lang/Throwable;
	public static final fun fold (Lcom/slack/eithernet/ApiResult;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;
	public static final fun fold (Lcom/slack/eithernet/ApiResult;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;
	public static final fun onApiFailure (Lcom/slack/eithernet/ApiResult;Lkotlin/jvm/functions/Function1;)Lcom/slack/eithernet/ApiResult;
	public static final fun onFailure (Lcom/slack/eithernet/ApiResult;Lkotlin/jvm/functions/Function1;)Lcom/slack/eithernet/ApiResult;
	public static final fun onHttpFailure (Lcom/slack/eithernet/ApiResult;Lkotlin/jvm/functions/Function1;)Lcom/slack/eithernet/ApiResult;
	public static final fun onNetworkFailure (Lcom/slack/eithernet/ApiResult;Lkotlin/jvm/functions/Function1;)Lcom/slack/eithernet/ApiResult;
	public static final fun onSuccess (Lcom/slack/eithernet/ApiResult;Lkotlin/jvm/functions/Function1;)Lcom/slack/eithernet/ApiResult;
	public static final fun onUnknownFailure (Lcom/slack/eithernet/ApiResult;Lkotlin/jvm/functions/Function1;)Lcom/slack/eithernet/ApiResult;
	public static final fun successOrElse (Lcom/slack/eithernet/ApiResult;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;
	public static final fun successOrNothing (Lcom/slack/eithernet/ApiResult;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;
	public static final fun successOrNull (Lcom/slack/eithernet/ApiResult;)Ljava/lang/Object;
}

public abstract interface annotation class com/slack/eithernet/InternalEitherNetApi : java/lang/annotation/Annotation {
}

public final class com/slack/eithernet/KTypesKt {
	public static final fun canonicalize (Lkotlin/reflect/KType;)Lkotlin/reflect/KType;
	public static final fun isFunctionallyEqualTo (Lkotlin/reflect/KType;Lkotlin/reflect/KType;)Z
}

public abstract interface annotation class com/slack/eithernet/ResultType : java/lang/annotation/Annotation {
	public abstract fun isArray ()Z
	public abstract fun ownerType ()Ljava/lang/Class;
	public abstract fun rawType ()Ljava/lang/Class;
	public abstract fun typeArgs ()[Lcom/slack/eithernet/ResultType;
}

public final class com/slack/eithernet/RetriesKt {
	public static final fun retryWithExponentialBackoff-3c68mSE (IJDJDLkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function2;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static synthetic fun retryWithExponentialBackoff-3c68mSE$default (IJDJDLkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function2;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
}

public abstract interface annotation class com/slack/eithernet/StatusCode : java/lang/annotation/Annotation {
	public abstract fun value ()I
}

public final class com/slack/eithernet/TagsKt {
	public static final fun tag (Lcom/slack/eithernet/ApiResult;Lkotlin/reflect/KClass;)Ljava/lang/Object;
}

public final class com/slack/eithernet/Types {
	public static final field INSTANCE Lcom/slack/eithernet/Types;
	public static final fun arrayOf (Ljava/lang/reflect/Type;)Ljava/lang/reflect/GenericArrayType;
	public static final fun equals (Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z
	public static final fun getRawType (Ljava/lang/reflect/Type;)Ljava/lang/Class;
	public static final fun newParameterizedType (Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)Ljava/lang/reflect/ParameterizedType;
	public static final fun newParameterizedTypeWithOwner (Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)Ljava/lang/reflect/ParameterizedType;
	public static final fun subtypeOf (Ljava/lang/reflect/Type;)Ljava/lang/reflect/WildcardType;
	public static final fun supertypeOf (Ljava/lang/reflect/Type;)Ljava/lang/reflect/WildcardType;
}

public final class com/slack/eithernet/TypesKt {
	public static final fun toKType (Ljava/lang/reflect/Type;ZLjava/util/List;)Lkotlin/reflect/KType;
	public static synthetic fun toKType$default (Ljava/lang/reflect/Type;ZLjava/util/List;ILjava/lang/Object;)Lkotlin/reflect/KType;
	public static final fun toKTypeProjection (Ljava/lang/reflect/Type;)Lkotlin/reflect/KTypeProjection;
}

public final class com/slack/eithernet/Util {
	public static final fun canonicalize (Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;
	public static final fun removeSubtypeWildcard (Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;
	public static final fun resolve (Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;Ljava/lang/Class;)Ljava/lang/reflect/Type;
}

